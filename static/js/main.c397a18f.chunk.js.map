{"version":3,"sources":["App.js","components/Button.jsx","reportWebVitals.js","index.js"],"names":["startTime","timeoutId","Button","onStart","onStop","onReset","status","className","onClick","elapsedTime","GameStatus","Object","freeze","init","start","reset","stop","App","useState","time","timeChange","statusChange","countUp","d","Date","now","m","String","getMinutes","padStart","s","getSeconds","ms","getMilliseconds","setTimeout","clearTimeout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kHAGIA,EAEAC,E,qDCQWC,EAXI,SAAC,GAAqC,IAApCC,EAAmC,EAAnCA,QAAQC,EAA2B,EAA3BA,OAAOC,EAAoB,EAApBA,QAAQC,EAAY,EAAZA,OAEpC,OACI,sBAAKC,UAAU,SAAf,UACI,wBAAQA,UAAsB,UAAXD,EAA0C,UAAwB,OAAQE,QAASL,EAAtG,mBACA,wBAAQI,UAAsB,UAAXD,EAAgC,SAAXA,EAAoB,UAAY,OAAS,UAAWE,QAASJ,EAArG,kBACA,wBAAQG,UAAsB,SAAXD,EAA+B,UAAXA,EAAqB,UAAY,OAAS,UAAWE,QAASH,EAArG,uBDDZI,EAAc,EAEZC,EAAaC,OAAOC,OAAO,CAC/BC,KAAK,OACLC,MAAM,QACNC,MAAM,QACNC,KAAK,SA2DQC,MAvDf,WAAgB,IAAD,EAEaC,mBAAS,aAFtB,mBAENC,EAFM,KAEDC,EAFC,OAIiBF,mBAASR,EAAWG,MAJrC,mBAINP,EAJM,KAICe,EAJD,KAMPC,EAAU,SAAVA,IAEJ,IAAMC,EAAI,IAAIC,KAAKA,KAAKC,MAAQzB,EAAUS,GACpCiB,EAAIC,OAAOJ,EAAEK,cAAcC,SAAS,EAAE,KACtCC,EAAIH,OAAOJ,EAAEQ,cAAcF,SAAS,EAAE,KACtCG,EAAKL,OAAOJ,EAAEU,mBAAmBJ,SAAS,EAAE,KAElDT,EAAW,GAAD,OAAIM,EAAJ,YAASI,EAAT,YAAcE,IAExB/B,EAAYiC,YAAW,WACrBZ,MACA,KAwBJ,OACE,sBAAKf,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,8DACF,qBAAKA,UAAU,OAAf,SAAuBY,IACrB,cAAC,EAAD,CACEhB,QA1BQ,WAEZH,EAAYwB,KAAKC,MAEjBH,IAEAD,EAAaX,EAAWI,QAqBpBV,OAlBO,WACX+B,aAAalC,GACbQ,GAAee,KAAKC,MAAQzB,EAC5BqB,EAAaX,EAAWM,OAgBpBX,QAbQ,WACZe,EAAW,aACXX,EAAc,EACdY,EAAaX,EAAWG,OAWpBP,OAAQA,QEtDD8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.c397a18f.chunk.js","sourcesContent":["import React,{useState}  from 'react';\nimport Button from './components/Button';\n\nlet startTime;\n\nlet timeoutId;\n\nlet elapsedTime = 0;\n\nconst GameStatus = Object.freeze({\n  init:'init',\n  start:'start',\n  reset:'reset',\n  stop:'stop'\n});\n\n\nfunction App() {\n  \n  const [time,timeChange] = useState('00:00.000');\n\n  const [status,statusChange] = useState(GameStatus.init);\n\n  const countUp = () => {\n    \n    const d = new Date(Date.now() - startTime+elapsedTime);\n    const m = String(d.getMinutes()).padStart(2,'0');\n    const s = String(d.getSeconds()).padStart(2,'0');\n    const ms = String(d.getMilliseconds()).padStart(3,'0');\n\n    timeChange(`${m}:${s}.${ms}`);\n\n    timeoutId = setTimeout(()=>{\n      countUp();\n    },10);\n  };\n\n  const start = () => {\n\n    startTime = Date.now();\n\n    countUp();\n\n    statusChange(GameStatus.start);\n  };\n\n  const stop = () => {\n    clearTimeout(timeoutId);\n    elapsedTime += Date.now() - startTime;\n    statusChange(GameStatus.stop);\n  }\n  \n  const reset = () => {\n    timeChange('00:00.000');\n    elapsedTime = 0;\n    statusChange(GameStatus.init);\n  };\n  \n  return (\n    <div className=\"App\">\n      <h1 className=\"title\">ストップウォッチ</h1>\n    <div className=\"time\">{time}</div>\n      <Button \n        onStart={start}\n        onStop={stop}\n        onReset={reset}\n        status={status}\n      />\n    </div>\n  );\n}\n\nexport default App;\n\n\n","import React from 'react';\n\n    const Button = ({onStart,onStop,onReset,status}) => {\n      \n        return (\n            <div className=\"button\">\n                <button className={status === 'start' ? status === 'reset' ? 'disable' : 'disable' : 'able'} onClick={onStart}>Start</button>\n                <button className={status === 'start' ? status === 'stop' ? 'disable' : 'able' : 'disable'} onClick={onStop}>Stop</button>\n                <button className={status === 'stop' ? status === 'reset' ? 'disable' : 'able' : 'disable'} onClick={onReset}>Reset</button>\n            </div>\n        );\n    };\n\nexport default Button;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}